{"env_info": "sys.platform: win32\nPython: 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1050\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\nNVCC: Cuda compilation tools, release 10.2, V10.2.8\nGCC: n/a\nPyTorch: 1.10.0+cu102\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/w/b/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu102\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 10.2\nMMClassification: 0.25.0+3d4f80d", "seed": 728930849, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet_CIFAR',\n        depth=50,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=10,\n        in_channels=2048,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\ndataset_type = 'CIFAR10'\nimg_norm_cfg = dict(\n    mean=[125.307, 122.961, 113.8575],\n    std=[51.5865, 50.847, 51.255],\n    to_rgb=False)\ntrain_pipeline = [\n    dict(type='RandomCrop', size=32, padding=4),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(type='RandomCrop', size=32, padding=4),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True),\n    test=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True))\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[4, 8])\nrunner = dict(type='EpochBasedRunner', max_epochs=2)\ncheckpoint_config = dict(interval=10)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/resnet50_b16x8_cifar10_20210528-f54bfad9.pth'\nresume_from = None\nworkflow = [('train', 1)]\nevaluation = dict(\n    interval=1,\n    metric=['accuracy', 'precision', 'f1_score'],\n    metric_options=dict(topk=(1, )))\nwork_dir = 'work/cifar10'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 728930849\n", "CLASSES": ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01, "memory": 1100, "data_time": 0.13493, "loss": 0.00081, "time": 0.42103}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01, "memory": 1100, "data_time": 0.00144, "loss": 0.00172, "time": 0.27941}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01, "memory": 1100, "data_time": 0.00133, "loss": 0.00467, "time": 0.27918}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01, "memory": 1100, "data_time": 0.00133, "loss": 0.01053, "time": 0.27907}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01, "memory": 1100, "data_time": 0.00146, "loss": 0.01589, "time": 0.27917}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 1100, "data_time": 0.00151, "loss": 0.02218, "time": 0.27926}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 1100, "data_time": 0.00136, "loss": 0.02873, "time": 0.27922}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 1100, "data_time": 0.00141, "loss": 0.03833, "time": 0.27953}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 1100, "data_time": 0.00136, "loss": 0.034, "time": 0.27993}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 1100, "data_time": 0.0013, "loss": 0.03578, "time": 0.28015}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 1100, "data_time": 0.00141, "loss": 0.0405, "time": 0.28029}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 1100, "data_time": 0.00137, "loss": 0.03552, "time": 0.28051}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 1100, "data_time": 0.00133, "loss": 0.03852, "time": 0.28092}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 1100, "data_time": 0.00136, "loss": 0.03922, "time": 0.27975}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 1100, "data_time": 0.00146, "loss": 0.03565, "time": 0.2801}
{"mode": "val", "epoch": 1, "iter": 313, "lr": 0.01, "accuracy_top-1": 93.17, "precision": 93.53877, "f1_score": 93.24969}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 1100, "data_time": 0.02048, "loss": 0.02823, "time": 0.29861}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 1100, "data_time": 0.00141, "loss": 0.03317, "time": 0.28002}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 1100, "data_time": 0.00139, "loss": 0.03682, "time": 0.28028}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.01, "memory": 1100, "data_time": 0.00142, "loss": 0.03141, "time": 0.27987}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.01, "memory": 1100, "data_time": 0.00129, "loss": 0.02809, "time": 0.2792}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 1100, "data_time": 0.00137, "loss": 0.02737, "time": 0.27959}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 1100, "data_time": 0.00135, "loss": 0.03213, "time": 0.28029}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 1100, "data_time": 0.00121, "loss": 0.03078, "time": 0.28046}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 1100, "data_time": 0.00096, "loss": 0.03038, "time": 0.28104}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.01, "memory": 1100, "data_time": 0.00111, "loss": 0.04357, "time": 0.28107}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.01, "memory": 1100, "data_time": 0.00109, "loss": 0.05909, "time": 0.28142}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.01, "memory": 1100, "data_time": 0.0011, "loss": 0.04393, "time": 0.28154}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.01, "memory": 1100, "data_time": 0.00094, "loss": 0.03686, "time": 0.28127}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.01, "memory": 1100, "data_time": 0.00111, "loss": 0.05251, "time": 0.28139}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.01, "memory": 1100, "data_time": 0.0011, "loss": 0.03248, "time": 0.28155}
{"mode": "val", "epoch": 2, "iter": 313, "lr": 0.01, "accuracy_top-1": 94.11, "precision": 94.15725, "f1_score": 94.11784}
